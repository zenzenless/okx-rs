/*
 * REST API
 *
 * # 使用说明   <b>该功能接口用户需先登陆，接口只会请求模拟环境</b><br><br>*Parameters* 面板中点击`Try it out`按钮，编辑请求参数，点击`Execute`按钮发送请求。*Responses* 面板中查看请求结果。<br>
 *
 * The version of the OpenAPI document: v5
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::ops::Deref;
use hmac::{Hmac, Mac};
use sha2::Sha256;
use base64::encode;
use chrono::Utc;



#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: CustomClient,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub bearer_access_token: Option<String>,
    pub api_key: Option<ApiKey>,
}

pub type BasicAuth = (String, Option<String>);

#[derive(Debug, Clone)]
pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}


impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }
}

impl Default for Configuration {
    fn default() -> Self {
        Configuration {
            base_path: "http://localhost".to_owned(),
            user_agent: Some("OpenAPI-Generator/v5/rust".to_owned()),
            client: CustomClient { client: reqwest::Client::new() },
            basic_auth: None,
            oauth_access_token: None,
            bearer_access_token: None,
            api_key: None,
        }
    }
}
#[derive(Debug, Clone)]
pub struct CustomClient {
    client: reqwest::Client,
}
impl Deref for CustomClient {
    type Target = reqwest::Client;

    fn deref(&self) -> &Self::Target {
        &self.client
    }
}
impl CustomClient {
    pub fn sign_request(
        &self,
        request:&reqwest::Request,
        method: &str,
        request_path: &str,
        body: &str,
        api_key: &str,
        secret_key: &str,
        passphrase: &str,
    ) -> reqwest::RequestBuilder {
        let timestamp = Utc::now().to_rfc3339_opts(chrono::SecondsFormat::Millis, true);
        let prehash_string = format!("{}{}{}{}", timestamp, request.method().as_str(), request.url().as_str(), &body);
       let a= request.body();
        let mut mac = Hmac::<Sha256>::new_from_slice(secret_key.as_bytes())
            .expect("HMAC can take key of any size");
        mac.update(prehash_string.as_bytes());
        let signature = encode(mac.finalize().into_bytes());
     
        self.client
            .request(reqwest::Method::from_bytes(method.as_bytes()).unwrap(), request_path)
            .header("OK-ACCESS-KEY", api_key)
            .header("OK-ACCESS-SIGN", signature)
            .header("OK-ACCESS-TIMESTAMP", timestamp)
            .header("OK-ACCESS-PASSPHRASE", passphrase)
            .header("Content-Type", "application/json")
            .body(body.to_string())
    }
}