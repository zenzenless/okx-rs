/*
 * REST API
 *
 * # 使用说明   <b>该功能接口用户需先登陆，接口只会请求模拟环境</b><br><br>*Parameters* 面板中点击`Try it out`按钮，编辑请求参数，点击`Execute`按钮发送请求。*Responses* 面板中查看请求结果。<br>
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`api_v5_trade_amend_batch_orders_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeAmendBatchOrdersPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_amend_order_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeAmendOrderPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_batch_orders_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeBatchOrdersPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_cancel_advance_algos_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeCancelAdvanceAlgosPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_cancel_algos_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeCancelAlgosPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_cancel_batch_orders_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeCancelBatchOrdersPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_cancel_order_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeCancelOrderPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_close_position_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeClosePositionPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_fills_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeFillsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_fills_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeFillsHistoryGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_order_algo_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeOrderAlgoPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_order_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeOrderGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_order_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeOrderPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_orders_algo_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeOrdersAlgoHistoryGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_orders_algo_pending_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeOrdersAlgoPendingGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_orders_history_archive_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeOrdersHistoryArchiveGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_orders_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeOrdersHistoryGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v5_trade_orders_pending_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV5TradeOrdersPendingGetError {
    UnknownValue(serde_json::Value),
}


pub async fn api_v5_trade_amend_batch_orders_post(configuration: &configuration::Configuration, api_v5_trade_amend_order_post_request: models::ApiV5TradeAmendOrderPostRequest) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<ApiV5TradeAmendBatchOrdersPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/amend-batch-orders", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&api_v5_trade_amend_order_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeAmendBatchOrdersPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_amend_order_post(configuration: &configuration::Configuration, api_v5_trade_amend_order_post_request: models::ApiV5TradeAmendOrderPostRequest) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<ApiV5TradeAmendOrderPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/amend-order", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&api_v5_trade_amend_order_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeAmendOrderPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_batch_orders_post(configuration: &configuration::Configuration, api_v5_trade_order_post_request: models::ApiV5TradeOrderPostRequest) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<ApiV5TradeBatchOrdersPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/batch-orders", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&api_v5_trade_order_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeBatchOrdersPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 撤销冰山委托、时间加权等高级策略委托订单，每次最多可以撤销10个策略委托单
pub async fn api_v5_trade_cancel_advance_algos_post(configuration: &configuration::Configuration, api_v5_trade_cancel_algos_post_request: models::ApiV5TradeCancelAlgosPostRequest) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<ApiV5TradeCancelAdvanceAlgosPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/cancel-advance-algos", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&api_v5_trade_cancel_algos_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeCancelAdvanceAlgosPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 撤销策略委托订单（不包含冰山委托、时间加权等高级策略订单），每次最多可以撤销10个策略委托单
pub async fn api_v5_trade_cancel_algos_post(configuration: &configuration::Configuration, api_v5_trade_cancel_algos_post_request: models::ApiV5TradeCancelAlgosPostRequest) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<ApiV5TradeCancelAlgosPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/cancel-algos", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&api_v5_trade_cancel_algos_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeCancelAlgosPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_cancel_batch_orders_post(configuration: &configuration::Configuration, api_v5_trade_cancel_order_post_request: models::ApiV5TradeCancelOrderPostRequest) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<ApiV5TradeCancelBatchOrdersPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/cancel-batch-orders", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&api_v5_trade_cancel_order_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeCancelBatchOrdersPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_cancel_order_post(configuration: &configuration::Configuration, api_v5_trade_cancel_order_post_request: models::ApiV5TradeCancelOrderPostRequest) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<ApiV5TradeCancelOrderPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/cancel-order", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&api_v5_trade_cancel_order_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeCancelOrderPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_close_position_post(configuration: &configuration::Configuration, api_v5_trade_close_position_post_request: models::ApiV5TradeClosePositionPostRequest) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<ApiV5TradeClosePositionPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/close-position", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&api_v5_trade_close_position_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeClosePositionPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_fills_get(configuration: &configuration::Configuration, inst_type: &str, uly: Option<&str>, inst_id: Option<&str>, ord_id: Option<&str>, after: Option<&str>, before: Option<&str>, limit: Option<&str>) -> Result<serde_json::Value, Error<ApiV5TradeFillsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/fills", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("instType", &inst_type.to_string())]);
    if let Some(ref local_var_str) = uly {
        local_var_req_builder = local_var_req_builder.query(&[("uly", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = inst_id {
        local_var_req_builder = local_var_req_builder.query(&[("instId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ord_id {
        local_var_req_builder = local_var_req_builder.query(&[("ordId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = after {
        local_var_req_builder = local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = before {
        local_var_req_builder = local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeFillsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_fills_history_get(configuration: &configuration::Configuration, inst_type: &str, uly: Option<&str>, inst_id: Option<&str>, ord_id: Option<&str>, after: Option<&str>, before: Option<&str>, limit: Option<&str>) -> Result<serde_json::Value, Error<ApiV5TradeFillsHistoryGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/fills-history", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("instType", &inst_type.to_string())]);
    if let Some(ref local_var_str) = uly {
        local_var_req_builder = local_var_req_builder.query(&[("uly", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = inst_id {
        local_var_req_builder = local_var_req_builder.query(&[("instId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ord_id {
        local_var_req_builder = local_var_req_builder.query(&[("ordId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = after {
        local_var_req_builder = local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = before {
        local_var_req_builder = local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeFillsHistoryGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_order_algo_post(configuration: &configuration::Configuration, api_v5_trade_order_algo_post_request: models::ApiV5TradeOrderAlgoPostRequest) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<ApiV5TradeOrderAlgoPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/order-algo", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&api_v5_trade_order_algo_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeOrderAlgoPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_order_get(configuration: &configuration::Configuration, inst_id: &str, ord_id: Option<&str>, cl_ord_id: Option<&str>) -> Result<serde_json::Value, Error<ApiV5TradeOrderGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/order", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("instId", &inst_id.to_string())]);
    if let Some(ref local_var_str) = ord_id {
        local_var_req_builder = local_var_req_builder.query(&[("ordId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cl_ord_id {
        local_var_req_builder = local_var_req_builder.query(&[("clOrdId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeOrderGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_order_post(configuration: &configuration::Configuration, api_v5_trade_order_post_request: models::ApiV5TradeOrderPostRequest) -> Result<std::collections::HashMap<String, serde_json::Value>, Error<ApiV5TradeOrderPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/order", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&api_v5_trade_order_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeOrderPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_orders_algo_history_get(configuration: &configuration::Configuration, ord_type: &str, algo_id: Option<&str>, state: Option<&str>, inst_type: Option<&str>, inst_id: Option<&str>, after: Option<&str>, before: Option<&str>, limit: Option<&str>) -> Result<serde_json::Value, Error<ApiV5TradeOrdersAlgoHistoryGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/orders-algo-history", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("ordType", &ord_type.to_string())]);
    if let Some(ref local_var_str) = algo_id {
        local_var_req_builder = local_var_req_builder.query(&[("algoId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = state {
        local_var_req_builder = local_var_req_builder.query(&[("state", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = inst_type {
        local_var_req_builder = local_var_req_builder.query(&[("instType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = inst_id {
        local_var_req_builder = local_var_req_builder.query(&[("instId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = after {
        local_var_req_builder = local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = before {
        local_var_req_builder = local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeOrdersAlgoHistoryGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_orders_algo_pending_get(configuration: &configuration::Configuration, ord_type: &str, algo_id: Option<&str>, inst_type: Option<&str>, inst_id: Option<&str>, after: Option<&str>, before: Option<&str>, limit: Option<&str>) -> Result<serde_json::Value, Error<ApiV5TradeOrdersAlgoPendingGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/orders-algo-pending", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("ordType", &ord_type.to_string())]);
    if let Some(ref local_var_str) = algo_id {
        local_var_req_builder = local_var_req_builder.query(&[("algoId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = inst_type {
        local_var_req_builder = local_var_req_builder.query(&[("instType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = inst_id {
        local_var_req_builder = local_var_req_builder.query(&[("instId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = after {
        local_var_req_builder = local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = before {
        local_var_req_builder = local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeOrdersAlgoPendingGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_orders_history_archive_get(configuration: &configuration::Configuration, inst_type: &str, uly: Option<&str>, inst_id: Option<&str>, ord_type: Option<&str>, state: Option<&str>, category: Option<&str>, after: Option<&str>, before: Option<&str>, limit: Option<&str>) -> Result<serde_json::Value, Error<ApiV5TradeOrdersHistoryArchiveGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/orders-history-archive", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("instType", &inst_type.to_string())]);
    if let Some(ref local_var_str) = uly {
        local_var_req_builder = local_var_req_builder.query(&[("uly", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = inst_id {
        local_var_req_builder = local_var_req_builder.query(&[("instId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ord_type {
        local_var_req_builder = local_var_req_builder.query(&[("ordType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = state {
        local_var_req_builder = local_var_req_builder.query(&[("state", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = category {
        local_var_req_builder = local_var_req_builder.query(&[("category", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = after {
        local_var_req_builder = local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = before {
        local_var_req_builder = local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeOrdersHistoryArchiveGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_orders_history_get(configuration: &configuration::Configuration, inst_type: &str, uly: Option<&str>, inst_id: Option<&str>, ord_type: Option<&str>, state: Option<&str>, category: Option<&str>, after: Option<&str>, before: Option<&str>, limit: Option<&str>) -> Result<serde_json::Value, Error<ApiV5TradeOrdersHistoryGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/orders-history", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("instType", &inst_type.to_string())]);
    if let Some(ref local_var_str) = uly {
        local_var_req_builder = local_var_req_builder.query(&[("uly", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = inst_id {
        local_var_req_builder = local_var_req_builder.query(&[("instId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ord_type {
        local_var_req_builder = local_var_req_builder.query(&[("ordType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = state {
        local_var_req_builder = local_var_req_builder.query(&[("state", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = category {
        local_var_req_builder = local_var_req_builder.query(&[("category", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = after {
        local_var_req_builder = local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = before {
        local_var_req_builder = local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeOrdersHistoryGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v5_trade_orders_pending_get(configuration: &configuration::Configuration, inst_id: Option<&str>, inst_type: Option<&str>, uly: Option<&str>, ord_type: Option<&str>) -> Result<serde_json::Value, Error<ApiV5TradeOrdersPendingGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v5/trade/orders-pending", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = inst_id {
        local_var_req_builder = local_var_req_builder.query(&[("instId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = inst_type {
        local_var_req_builder = local_var_req_builder.query(&[("instType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = uly {
        local_var_req_builder = local_var_req_builder.query(&[("uly", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ord_type {
        local_var_req_builder = local_var_req_builder.query(&[("ordType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiV5TradeOrdersPendingGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

